package com.aop.epam.aspect;

import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

import com.aop.epam.model.Accounts;

import lombok.extern.slf4j.Slf4j;

@Aspect
@Slf4j
@Component
public class LoggingAspect {
	Logger log=LogFactory.getLog(LoggingAspect.class);

	@Pointcut("@annotation(com.example.aop.springaop.annotation.CustomAnnotation)")
	public void loggingPointCut() {
	}

	@Around("loggingPointCut()")
	public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
		log.info("Before method invoked::" + joinPoint.getArgs()[0]);
		Object object = joinPoint.proceed();

		if (object instanceof Accounts) {
			log.info("After method invoked..." + joinPoint.getArgs()[0]);
		} 

		return object;
	}
}
