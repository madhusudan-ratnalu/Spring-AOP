package com.aop.epam.aspect;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class LoggingAspect {

	@Pointcut("@annotation(com.example.aop.springaop.annotation.CustomAnnotation)")
	public void loggingPointCut() {
	}

	@Around("loggingPointCut()")
	public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
		log.info("Before method invoked::" + joinPoint.getArgs()[0]);
		Object object = joinPoint.proceed();

		if (object instanceof Employee) {
			log.info("After method invoked..." + joinPoint.getArgs()[0]);
		} else if (object instanceof Department) {
			log.info("After method invoked..." + joinPoint.getArgs()[0]);
		}

		return object;
	}
}
